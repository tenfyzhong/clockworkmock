// Code generated by MockGen. DO NOT EDIT.
// Source: ticker.go

// Package clockworkmock is a generated GoMock package.
package clockworkmock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockTicker is a mock of Ticker interface
type MockTicker struct {
	ctrl     *gomock.Controller
	recorder *MockTickerMockRecorder
}

// MockTickerMockRecorder is the mock recorder for MockTicker
type MockTickerMockRecorder struct {
	mock *MockTicker
}

// NewMockTicker creates a new mock instance
func NewMockTicker(ctrl *gomock.Controller) *MockTicker {
	mock := &MockTicker{ctrl: ctrl}
	mock.recorder = &MockTickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTicker) EXPECT() *MockTickerMockRecorder {
	return m.recorder
}

// Chan mocks base method
func (m *MockTicker) Chan() <-chan time.Time {
	ret := m.ctrl.Call(m, "Chan")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Chan indicates an expected call of Chan
func (mr *MockTickerMockRecorder) Chan() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chan", reflect.TypeOf((*MockTicker)(nil).Chan))
}

// Stop mocks base method
func (m *MockTicker) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockTickerMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTicker)(nil).Stop))
}
